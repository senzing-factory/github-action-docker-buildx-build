name: Run docker buildx build
description: Prepare the environment and run docker buildx build.
author: support@senzing.com

inputs:
  aws-region:
    default: "us-east-1"
    description: AWS region used for ECR login
  build-options:
    description: Additional options to pass to docker buildx build
  context:
    default: "."
    description: Context (directory) of the docker build process
  image-repository:
    description: Docker repository (e.g. senzing/senzingapi-runtime)
    required: true
  image-tag:
    default: latest
    description: Docker image tag
  login-to-dockerhub:
    default: true
    description: Login to Dockerhub
  login-to-ecr:
    default: false
    description: Login to ECR
  password:
    description: Access Token for Docker registry
  platforms:
    default: linux/amd64,linux/arm64
    description: Comma-separated list of docker platforms to build (hint - See output of docker buildx ls)
  push:
    default: false
    description: Push image to registry
  registry-server:
    default: docker.io
    description: Docker registry server
  role-session-name:
    description: AWS role session name, required for ECR login
  role-to-assume:
    description: AWS role to assume, required for ECR login
  sign-image:
    default: false
    description: Sign and add attestations to the built image (true or false).
  username:
    description: Username for Docker registry

runs:
  using: composite
  steps:
    - name: checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: "0"
        submodules: recursive

    - name: set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - if: ${{ inputs.login-to-dockerhub == 'true' }}
      name: DockerHub login
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry-server }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - if: ${{ inputs.login-to-ecr == 'true' }}
      name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-session-name: ${{ inputs.role-session-name }}
        role-to-assume: ${{ inputs.role-to-assume }}

    - id: login-ecr-public
      if: ${{ inputs.login-to-ecr == 'true' }}
      name: login to Amazon ECR Public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: generate tags
      run: |
        CLEANED_TAG=$(echo ${{ inputs.image-tag }} | tr -d "/#" )
        tags=""
        if ${{ inputs.login-to-ecr == 'true' }}; then
          tags="${{ steps.login-ecr-public.outputs.registry }}/${{ inputs.image-repository }}:$CLEANED_TAG,"
          tags="${tags}${{ steps.login-ecr-public.outputs.registry }}/${{ inputs.image-repository }}:latest,"
        fi
        tags="${tags}${{ inputs.registry-server }}/${{ inputs.image-repository }}:$CLEANED_TAG,"
        tags="${tags}${{ inputs.registry-server }}/${{ inputs.image-repository }}:latest"
        echo "[INFO] tags are: $tags"
        echo "TAGS=${tags}" >> "$GITHUB_ENV"
      shell: bash

    - id: docker_meta_dockerhub
      if: ${{ inputs.sign-image == 'true' && inputs.login-to-dockerhub == 'true' }}
      uses: docker/metadata-action@v5.6.1
      with:
        images: ${{ inputs.registry-server }}/${{ inputs.image-repository }}
        tags: |
          type=semver,pattern={{version}}
          type=sha,format=long

    - id: docker_meta_ecr
      if: ${{ inputs.sign-image == 'true' && inputs.login-to-ecr == 'true' }}
      uses: docker/metadata-action@v5.6.1
      with:
        images: ${{ steps.login-ecr-public.outputs.registry }}/${{ inputs.image-repository }}
        tags: |
          type=semver,pattern={{version}}
          type=sha,format=long

    - id: build-and-push
      name: Build and push
      uses: docker/build-push-action@v6
      with:
        annotations: ${{ steps.docker_meta_dockerhub.outputs.annotations }}
        build-args: ${{ inputs.build-options }}
        context: ${{ inputs.context }}
        platforms: ${{ inputs.platforms }}
        provenance: mode=max
        push: ${{ inputs.push }}
        sbom: true
        tags: ${{ env.TAGS }}

    - if: ${{ inputs.sign-image == 'true' && inputs.login-to-dockerhub == 'true' }}
      name: Generate DockerHub Attestations
      uses: senzing-factory/github-action-docker-buildx-build/attestations@29-skern
      with:
        artifact-name-prefix: dockerhub
        image-repository: ${{ inputs.image-repository }}
        registry-server: ${{ inputs.registry-server }}
        subject-digest: ${{ steps.build-and-push.outputs.digest }}

    - if: ${{ inputs.sign-image == 'true' && inputs.login-to-ecr == 'true' }}
      name: Generate ECR Attestations
      uses: senzing-factory/github-action-docker-buildx-build/attestations@29-skern
      with:
        artifact-name-prefix: ecr
        image-repository: ${{ inputs.image-repository }}
        registry-server: ${{ steps.login-ecr-public.outputs.registry }}
        subject-digest: ${{ steps.build-and-push.outputs.digest }}

    - if: ${{ inputs.sign-image == 'true' && inputs.login-to-dockerhub == 'true' }}
      name: Sign the DockerHub images with GitHub OIDC Token
      env:
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
        TAGS: ${{ steps.docker_meta_dockerhub.outputs.tags }}
      run: |
        images=""
        for tag in ${TAGS}; do
          images+="${tag}@${DIGEST} "
        done
        cosign sign --yes ${images}
        echo "[INFO] cosign verify --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
          --certificate-identity=https://github.com/${{ github.workflow_ref }} \
          ${{ inputs.registry-server }}/${{ inputs.image-repository }}:${{ inputs.image-tag }}"
      shell: bash

    #- if: ${{ inputs.sign-image == 'true' && inputs.login-to-dockerhub == 'true' }}
    #  name: Sign Images
    #  uses: senzing-factory/github-action-docker-buildx-build/signing@29-skern
    #  with:
    #    digest: ${{ steps.build-and-push.outputs.digest }}
    #    image-tags: ${{ steps.docker_meta_dockerhub.outputs.tags }}
    #    image-repository: ${{ inputs.image-repository }}
    #    registry-server: ${{ inputs.registry-server }}

    - if: ${{ inputs.sign-image == 'true' && inputs.login-to-ecr == 'true' }}
      name: Sign Images
      uses: senzing-factory/github-action-docker-buildx-build/signing@29-skern
      with:
        digest: ${{ steps.build-and-push.outputs.digest }}
        image-tags: ${{ steps.docker_meta_ecr.outputs.tags }}
        image-repository: ${{ inputs.image-repository }}
        registry-server: ${{ steps.login-ecr-public.outputs.registry }}

branding:
  icon: upload-cloud
  color: green
